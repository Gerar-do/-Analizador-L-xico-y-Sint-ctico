
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNAR CADENA CIN COMA COMDOB CORDER CORIZQ COUT DISTINTO DIV ENDL ENTERO GET IDENTIFICADOR IGUAL INCLUDE INT LLADER LLAIZQ MAYORDER MAYORIGUAL MAYORIZQ MAYORQUE MENORIGUAL MENORQUE MIENTRAS MINUSMINUS MODULO MULT NAMESPACE NOT NUMERAL NUMERO OR PARA PARDER PARIZQ PLUSPLUS POTENCIA PUNTO PUNTOCOMA RESTA RETURN SI SINO STD SUMA USING VOIDprogram : declaracionesdeclaraciones : declaraciones declaracion\n                     | declaraciondeclaracion : tipo IDENTIFICADOR PARIZQ PARDER bloquetipo : VOIDbloque : LLAIZQ instrucciones LLADERinstrucciones : instrucciones instruccion\n                     | instruccioninstruccion : expresion PUNTOCOMAexpresion : IDENTIFICADOR PUNTO IDENTIFICADOR PARIZQ argumentos PARDER\n                 | IDENTIFICADOR PUNTO IDENTIFICADOR PARIZQ PARDERargumentos : argumentos COMA argumento\n                  | argumentoargumento : ENTERO\n                 | NUMERO\n                 | CADENA\n                 | IDENTIFICADOR'
    
_lr_action_items = {'VOID':([0,2,3,6,10,16,],[5,5,-3,-2,-4,-6,]),'$end':([1,2,3,6,10,16,],[0,-1,-3,-2,-4,-6,]),'IDENTIFICADOR':([4,5,11,12,13,17,18,19,21,30,],[7,-5,15,15,-8,-7,-9,20,22,22,]),'PARIZQ':([7,20,],[8,21,]),'PARDER':([8,21,22,23,25,26,27,28,31,],[9,24,-17,29,-13,-14,-15,-16,-12,]),'LLAIZQ':([9,],[11,]),'LLADER':([12,13,17,18,],[16,-8,-7,-9,]),'PUNTOCOMA':([14,24,29,],[18,-11,-10,]),'PUNTO':([15,],[19,]),'ENTERO':([21,30,],[26,26,]),'NUMERO':([21,30,],[27,27,]),'CADENA':([21,30,],[28,28,]),'COMA':([22,23,25,26,27,28,31,],[-17,30,-13,-14,-15,-16,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaraciones':([0,],[2,]),'declaracion':([0,2,],[3,6,]),'tipo':([0,2,],[4,4,]),'bloque':([9,],[10,]),'instrucciones':([11,],[12,]),'instruccion':([11,12,],[13,17,]),'expresion':([11,12,],[14,14,]),'argumentos':([21,],[23,]),'argumento':([21,30,],[25,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaraciones','program',1,'p_program','analizador_sintactico.py',7),
  ('declaraciones -> declaraciones declaracion','declaraciones',2,'p_declaraciones','analizador_sintactico.py',11),
  ('declaraciones -> declaracion','declaraciones',1,'p_declaraciones','analizador_sintactico.py',12),
  ('declaracion -> tipo IDENTIFICADOR PARIZQ PARDER bloque','declaracion',5,'p_declaracion','analizador_sintactico.py',19),
  ('tipo -> VOID','tipo',1,'p_tipo','analizador_sintactico.py',23),
  ('bloque -> LLAIZQ instrucciones LLADER','bloque',3,'p_bloque','analizador_sintactico.py',27),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','analizador_sintactico.py',31),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','analizador_sintactico.py',32),
  ('instruccion -> expresion PUNTOCOMA','instruccion',2,'p_instruccion','analizador_sintactico.py',39),
  ('expresion -> IDENTIFICADOR PUNTO IDENTIFICADOR PARIZQ argumentos PARDER','expresion',6,'p_expresion','analizador_sintactico.py',43),
  ('expresion -> IDENTIFICADOR PUNTO IDENTIFICADOR PARIZQ PARDER','expresion',5,'p_expresion','analizador_sintactico.py',44),
  ('argumentos -> argumentos COMA argumento','argumentos',3,'p_argumentos','analizador_sintactico.py',51),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','analizador_sintactico.py',52),
  ('argumento -> ENTERO','argumento',1,'p_argumento','analizador_sintactico.py',59),
  ('argumento -> NUMERO','argumento',1,'p_argumento','analizador_sintactico.py',60),
  ('argumento -> CADENA','argumento',1,'p_argumento','analizador_sintactico.py',61),
  ('argumento -> IDENTIFICADOR','argumento',1,'p_argumento','analizador_sintactico.py',62),
]
